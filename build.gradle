// build.gradle

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		// Use versions compatible with your Spring Boot version (3.2.3)
		classpath 'org.springframework:spring-beans:6.0.12'
		classpath 'org.springframework:spring-core:6.0.12'
		classpath 'org.yaml:snakeyaml:2.0' // Required by YamlPropertiesFactoryBean
	}
}

import org.springframework.beans.factory.config.YamlPropertiesFactoryBean
import org.springframework.core.io.FileSystemResource

plugins {
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id "io.freefair.lombok" version "8.6"
	id 'java'
}

group = 'uk.gov.ons'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudGcpVersion', "5.0.4")
	set('springCloudVersion', "2023.0.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'com.google.cloud:spring-cloud-gcp-dependencies:5.0.4'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-bigquery'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-pubsub'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-sql-mysql'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-storage'

	implementation 'org.springframework.integration:spring-integration-core'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.projectlombok:lombok:1.18.30'
	implementation 'io.micrometer:micrometer-registry-prometheus:1.12.3'
	implementation 'commons-io:commons-io:2.15.1'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	testImplementation 'org.junit.platform:junit-platform-runner:1.10.2'

	// Required for MockMvc autoconfigure
	testImplementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'io.projectreactor:reactor-test:3.6.3'
	testImplementation 'com.squareup.okhttp3:okhttp:4.12.0'
	testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
	testImplementation 'org.mockito:mockito-inline:5.2.0'
	testImplementation 'com.h2database:h2'
	testImplementation 'org.springframework.cloud:spring-cloud-starter-bootstrap:4.1.1'

	if (!project.hasProperty('excludeTests')) {
		testImplementation 'com.playtika.testcontainers:embedded-google-pubsub:3.1.5'
	}

	// Resolves the java.lang.NoClassDefFoundError: org/junit/platform/engine/EngineDiscoveryListener in Eclipse
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:${springCloudGcpVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()

	// listen to events in the test execution lifecycle
	beforeTest { descriptor ->
		logger.lifecycle("Running test: " + descriptor)
	}

	if (project.hasProperty('excludeTests')) {
		exclude project.property('excludeTests')
		exclude '*bootstrap.properties'
	}
}

// Task to update defaults.properties using YamlPropertiesFactoryBean
task updateProperties {
	doLast {
		def yamlFactory = new YamlPropertiesFactoryBean()
		yamlFactory.setResources(new FileSystemResource('src/main/resources/application.yml'))
		yamlFactory.afterPropertiesSet()
		def propertiesFromYaml = yamlFactory.getObject()

		// Get the aims.epochs value
		def aimsEpochsValue = propertiesFromYaml.getProperty('aims.epochs')
		if (aimsEpochsValue == null) {
			throw new GradleException("aims.epochs not found in application.yml")
		}

		// Load defaults.properties
		def propertiesFile = file('src/main/resources/defaults.properties')
		def properties = new Properties()
		properties.load(new FileInputStream(propertiesFile))

		// Update the aims.epochs property
		properties.setProperty('aims.epochs', aimsEpochsValue)

		// Save the updated properties file
		properties.store(new FileOutputStream(propertiesFile), null)
	}
}

// Ensure the updateProperties task runs before processResources
processResources.dependsOn updateProperties
